# Use the official Golang image to create a build artifact
FROM golang:1.22.1-alpine as builder

# Install goose
RUN go install github.com/pressly/goose/v3/cmd/goose@latest

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN go build -o backendmain ./backend/main.go

# Start a new stage from scratch
FROM alpine:latest

WORKDIR /root/

# Copy the Pre-built binary file
COPY --from=builder /app/backendmain .
COPY --from=builder /go/bin/goose /usr/local/bin/goose
COPY wait-for-it.sh .
# Copy .env file into the container
COPY .env .  
COPY ./backend/sql/schema ./migrations
RUN chmod +x wait-for-it.sh

# Command to run the executable and migrations
CMD ["./wait-for-it.sh", "db:5432", "--", "sh", "-c", "goose -dir ./migrations postgres \"user=$DB_USER password=$DB_PASSWORD dbname=$DB_NAME host=$DB_HOST sslmode=$DB_SSLMODE\" up && ./backendmain"]
